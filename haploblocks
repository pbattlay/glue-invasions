##########
### LOCAL PCA ANALYSIS -- HAPLOBLOCK IDENTIFICATION
### PAUL BATTLAY
##########

# T. repens reference haploid reference genome (Santangelo et al., 2023) and samtools index
ls TrR_v6_dovetail/TrR_v6_haploid_reference.fasta
ls TrR_v6_dovetail/TrR_v6_haploid_reference.fasta.fai

# a list containing the names of the 16 chromosome sequences
ls chromosome_file.txt

# a list of absolute paths to 2660 GLUE, Spain and cultivar sequence bam files
ls allbams-9-23.bamlist

# a list of all 976 1 Mbp windows across the chromosomes
# of the form chromosome<SPACE>start<SPACE>end
ls windows-chrs-only-1Mb.list

###

# run ANGSD in 10Mbp windows and LD filter with plink
# angsd.sh
#!/bin/bash
#SBATCH --job-name=angsd
#SBATCH --account=def-johnso73
#SBATCH --ntasks=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --mem-per-cpu=10G
#SBATCH --time=01:00:00
#SBATCH --output=angsd-%a.out
#SBATCH --error=angsd-%a.err
#SBATCH --array=1-976%200

cd ~/scratch/clover/

N=$SLURM_ARRAY_TASK_ID
WIND=$(cat windows-chrs-only-1Mb.list | head -n $N | tail -n 1 | awk '{print $1 ":" $2 "-" $3}')

module load nixpkgs/16.09
module load intel/2018.3
module load angsd/0.929
module load plink/1.9b_5.2-x86_64

angsd \
-nThreads 8 \
-bam allbams-9-23.bamlist \
-r $WIND \
-out angsd/a-$N \
-GL 2 \
-doMajorMinor 1 \
-doCounts 1 \
-doGLF 2 \
-SNP_pval 1e-6 \
-doMaf 2 \
-doGeno -1 \
-doPost 1 \
-minMapQ 30 \
-minQ 20 \
-trim 5 \
-minMaf 0.05 \
-minInd 333 \
-geno_minDepth 2 \
-setMinDepthInd 2 \
-uniqueOnly 1 \
-doPlink 2

# LD filter with plink
plink \
--tfile angsd/a-$N \
--allow-extra-chr \
--indep-pairwise 50 5 0.5 \
--out angsd/a-$N

###

# RUN 'lostruct' ANALYSIS ON EACH CHROMOSOME
cd ~/scratch/clover/

mkdir lostruct/

# an R script to divide up larger windows into 100kb windows for lostruct
# minimum number of sites per window = 100
# lostruct-100kb-winds.R
options(scipen=999)

library(data.table)

setwd("~/scratch/clover/")

N = commandArgs(trailingOnly = TRUE)[1]

# read in beagle file
beagle = fread(paste0("angsd/a-", N, ".beagle.gz"), header = T)

# read in mafs file
mafs = fread(paste0("angsd/a-", N, ".mafs.gz"), header = T)

# get the chromosome name
chr = mafs$chromo[1]

# get 100kb windows for 10Mb window
wmin = floor(min(mafs$position) / 100000) * 100000
wmax = ceiling(max(mafs$position) / 100000) * 100000

winds = cbind(seq(wmin, wmax - 100000, 100000) + 1,
	seq(wmin + 100000, wmax, 100000))

# subset beagle for each 100kb window and write out
for (i in 1:nrow(winds)){
beagle100k = beagle[mafs$position >= winds[i, 1] & mafs$position <= winds[i, 2],]

if (nrow(beagle100k >= 100)){
fwrite(beagle100k, file = paste0("lostruct/", chr, "_", winds[i, 1] + 49999, ".beagle.gz"),
	col.names = F, row.names = F, quote = F, sep = "\t", compress = "gzip")
}

}

###

# run R script to make 100kb window beagle files
module load r/4.3.1

for N in {1..976}; do echo $N; Rscript lostruct-100kb-winds.R $N; done

###

# run pcangsd on each 100kb window
ls lostruct/*.beagle.gz | while read beag
do pcangsd -t 8 -b $beag -o ${beag/.beagle.gz/}
rm ${beag/.beagle.gz/.args}
done

# an R script to take a covariance matrix for a window and calculate a row for a lostruct input file
# eigenstuff.R
file = commandArgs(trailingOnly = TRUE)[1]

COV = read.table(file)
COV.pca = eigen(COV)
eigenstuff = c(sum(COV*COV), COV.pca$values[1], COV.pca$values[2], COV.pca$vectors[, 1], COV.pca$vectors[, 2])

write.table(eigenstuff,
file = paste0(file, ".es"),
col.names = F,
row.names = F,
quote = F)

# run eigenstuff on each 100kb window
module load r/4.3.1

cd lostruct/

ls *.cov | while read mat
do Rscript ../eigenstuff.R $mat
done

# combine windows for each chromosome
# and output a list of window locations
cd ~/scratch/ragweed/

ls lostruct/*.es | awk -F "/" '{print $2}' | awk -F "_" '{print $1 "_" $2}' | sort -u \
| while read CHR
do ls lostruct/${CHR}_*.cov.es | awk -F "/" '{print $2}' | awk -F "_" '{print $3}' \
| awk -F "." '{print $1}' | sort -n > lostruct2/$CHR.locs
ls lostruct/${CHR}_*.cov.es | awk -F "/" '{print $2}' | awk -F "_" '{print $3}' \
| awk -F "." '{print $1}' | sort -n \
| while read LOC
do echo $(cat lostruct/${CHR}_${LOC}.cov.es | tr -s '\n' ' ')
done > lostruct2/$CHR.lostruct
done

# MAKE MDS MANHATTANS FOR EACH PAIR OF MDS 1-5 ON EACH CHROMOSOME
# in R
library(lostruct)
library(ggplot2)
library(cowplot)

setwd("~/scratch/clover/lostruct2/")

CHRS = read.table("~/scratch/clover/chromo-length.txt", header = F)

for (n in 1:length(CHRS$V1)){

eigenstuff = as.matrix(read.table(paste0(CHRS$V1[n], ".lostruct"), header = F))

# and now we're back to lostruct code
windist = pc_dist(eigenstuff, npc = 2)

# 5D MDS
fit5d = cmdscale(windist, eig = TRUE, k = 5)
mds.coords = fit5d$points

outdf = as.data.frame(mds.coords)
colnames(outdf) = c("MDS1", "MDS2", "MDS3", "MDS4", "MDS5")

outdf$WIND = scan(paste0(CHRS$V1[n], ".locs"))
outdf$CHR = CHRS$V1[n]

outdf = outdf[, c("CHR", "WIND", "MDS1", "MDS2", "MDS3", "MDS4", "MDS5")]

locs = outdf$WIND

write.table(outdf, file = paste0("~/scratch/clover/haploblocks/", CHRS[n, 1], ".mdsdf.csv"), col.names = T, row.names = F, quote = F, sep = ",")

# for pair of MDS i and j
for (i in 1:(ncol(mds.coords) - 1)){
for (j in (i + 1):ncol(mds.coords)){

# identify 2D outliers for MDS pair
mds.corners = corners(mds.coords[, c(i, j)], prop = .05)

corners.mds.i.j = rep(NA, nrow(mds.coords))

# add corner annotations
for (c in 1:ncol(mds.corners)){
corners.mds.i.j[mds.corners[, c]] = c
}

# name the vector with MDS i and j
outdf = cbind(outdf, corners.mds.i.j)
colnames(outdf)[ncol(outdf)] = paste0("corners.mds.", i, ".", j)

mds.i.c.i.j.plot = ggplot() +
	geom_point(aes(x = locs, y = mds.coords[, i]), size = 2, shape = 19) +
	geom_point(aes(x = locs[mds.corners[, 1]], y = mds.coords[mds.corners[, 1], i]), size = 2, shape = 19, color = "#1B9E77") +
	geom_point(aes(x = locs[mds.corners[, 2]], y = mds.coords[mds.corners[, 2], i]), size = 2, shape = 19, color = "#D95F02") +
	geom_point(aes(x = locs[mds.corners[, 3]], y = mds.coords[mds.corners[, 3], i]), size = 2, shape = 19, color = "#7570B3") +
	#geom_segment(aes(x = hbc[,2], y = 1, xend = hbc[,3], yend = 1), colour = "#a6cee3", size = 4) +
	ylim(-1, 1) +
	xlim(0, CHRS$V2[n]) +
	ggtitle("") +
	labs(x = "",
		y = paste0("MDS", i)) +
	theme_classic() +
	theme(legend.position = "none",
		plot.title = element_text(size = 28),
		axis.text = element_text(size = 24),
		axis.title = element_text(size = 28)
	)

mds.j.c.i.j.plot = ggplot() +
	geom_point(aes(x = locs, y = mds.coords[, j]), size = 2, shape = 19) +
	geom_point(aes(x = locs[mds.corners[, 1]], y = mds.coords[mds.corners[, 1], j]), size = 2, shape = 19, color = "#1B9E77") +
	geom_point(aes(x = locs[mds.corners[, 2]], y = mds.coords[mds.corners[, 2], j]), size = 2, shape = 19, color = "#D95F02") +
	geom_point(aes(x = locs[mds.corners[, 3]], y = mds.coords[mds.corners[, 3], j]), size = 2, shape = 19, color = "#7570B3") +
	#geom_segment(aes(x = hbc[,2], y = 1, xend = hbc[,3], yend = 1), colour = "#a6cee3", size = 4) +
	ylim(-1, 1) +
	xlim(0, CHRS$V2[n]) +
	ggtitle("") +
	labs(x = "",
		y = paste0("MDS", j)) +
	theme_classic() +
	theme(legend.position = "none",
		plot.title = element_text(size = 28),
		axis.text = element_text(size = 24),
		axis.title = element_text(size = 28)
	)

ggsave(plot_grid(mds.i.c.i.j.plot, mds.j.c.i.j.plot, ncol = 1, align = "hv"),
	file = paste0("~/scratch/clover/plots/", CHRS$V1[n], "-", i, "-", j, "-mdsmans.png"),
	device = "png",
	width = 1920,
	height = 240 * 2,
	units = "px",
	dpi = 72)

}
}

write.table(outdf, file = paste0(CHRS$V1[n], ".mds"), col.names = T, row.names = F, quote = F)

}

# Haploblock identification and filtering

# manual identification of haploblock candidates
# informed by MDS plots
# estimate breakpoints
# write out list of 1% corner outlier windows

# in R
setwd("~/scratch/clover/lostruct2/")

# get breakpoints based on 5% corner outliers and manual inspection
chrdf = read.table("h1s16.mds", header = T)
chrdf[which(chrdf$corners.mds.1.2 == 2), ]$WIND

###

# haploblock candidate data frame
# chromosome; two MDS axes (mdsa, mdsb); corner; breakpoints
# hb-cands.txt
Chr01_Occ 1 2 2 45350000 50450000
Chr01_Occ 1 3 1 44850000 48150000
Chr02_Occ 1 2 2 11650000 14350000
Chr02_Occ 1 3 1 30450000 33150000
Chr02_Occ 1 4 2 20250000 23050000
Chr03_Occ 1 2 2 50000 2150000
Chr04_Occ 1 2 2 50750000 54450000
Chr04_Occ 1 2 3 1750000 6150000
Chr04_Occ 1 4 2 50000 2550000
Chr04_Occ 1 5 2 59050000 60450000
Chr04_Pall 1 2 2 1450000 8250000
Chr05_Occ 1 2 1 5150000 7350000
Chr05_Occ 1 2 2 3950000 5050000
Chr05_Occ 1 3 1 46150000 49250000
Chr06_Occ 1 2 2 50000 1250000
Chr06_Occ 2 3 1 19550000 22550000
Chr06_Occ 2 5 2 10350000 12350000
Chr07_Occ 1 2 3 150000 2150000
Chr07_Occ 1 3 3 45550000 49450000
Chr07_Occ 1 4 3 2150000 3750000
Chr07_Occ 2 5 1 45550000 47850000
Chr07_Occ 2 5 2 48150000 49550000
Chr07_Pall 1 2 1 50000 1650000

###

# after initial clustering check
# five haploblocks plus non-overlapping versions of hb7a1 and hb7a2
# hb-cands2.txt
Chr04_Occ 0 0 0 50000 3750000
Chr04_Occ 0 0 0 50000 1350000
Chr04_Occ 0 0 0 1450000 8450000
Chr04_Occ 0 0 0 3850000 8450000
Chr04_Occ 0 0 0 50850000 54450000
Chr05_Occ 0 0 0 3950000 5050000
Chr07_Occ 0 0 0 50000 1750000

###

# make beagle files for pcangsd
# in R
options(scipen=999)

setwd("~/scratch/clover/")

cands = read.table("hb-cands2.txt", header = F)

for (i in 1:nrow(cands)){

# whole region
write.table(paste0("lostruct/", cands$V1[i], "_", seq(cands$V5[i], cands$V6[i], 100000), ".beagle.gz"),
	file = paste0("lostruct2/", cands$V1[i], "_", cands$V5[i], "_", cands$V6[i], ".blist"), col.names = F, row.names = F, quote = F)

}

###

# concatenate beagle files for each haploblock candidate
# and run pcangsd
cd ~/scratch/clover/

for i in lostruct2/*.blist
do
cat $i | while read beag; do zcat $beag; done | gzip > ${i/.blist/.beagle.gz}
pcangsd -t 8 -b ${i/.blist/.beagle.gz} -o ${i/.blist/}
done

# HETEROZYGOSITY
# hbhet.sh
#!/bin/bash
#SBATCH --job-name=hbhet
#SBATCH --account=def-johnso73
#SBATCH --time=03:00:00
#SBATCH --output=hbhet-%a.out
#SBATCH --error=hbhet-%a.err
#SBATCH --array=1-2660%200 # in the actual job do 1k at a time

cd ~/scratch/clover/

module load nixpkgs/16.09
module load gcc/7.3.0
module load angsd/0.929

N=$SLURM_ARRAY_TASK_ID
bam=$(cat allbams-9-23.bamlist | head -n $N | tail -n 1)

cat hb-cands2.txt | while read hbchr mds1 mds2 cnr hbstart hbend
do

hb_name=$(echo $hbchr"_"$hbstart"_"$hbend)
hb_loc=$(echo $hbchr":"$hbstart"-"$hbend)

angsd \
-i $bam \
-anc TrR_v6_haploid_reference.fasta \
-dosaf 1 \
-r $hb_loc \
-out het/$hb_name-$N \
-minMapQ 30 \
-minQ 20 \
-trim 5 \
-GL 2

realSFS het/$hb_name-$N.saf.idx -fold 1 > het/$hb_name-$N.est.ml

done

###

# make initial haploblock data frames with PC1, PC2 and heterozygosity
# in R

setwd("~/scratch/clover/")

hbs = read.table("hb-cands2.txt", header = F)[, c(1, 5, 6)]

colnames(hbs) = c("chr", "start", "end")

meta = read.table("allbams-9-23.bamlist.meta", header = F)
colnames(meta) = c("sample", "pop", "range", "coverage")

for (i in 1:nrow(hbs)){

hb = as.data.frame(eigen(read.table(paste0("lostruct2/", hbs$chr[i], "_", hbs$start[i], "_", hbs$end[i], ".cov")))$vectors[, c(1, 2)])
colnames(hb) = c("PC1", "PC2")
hb = cbind(meta, hb)


# read in heterozygosity
het = c()

for (j in 1:2660){
a = scan(paste0("het/", hbs$chr[i], "_", hbs$start[i], "_", hbs$end[i], "-", j, ".est.ml"))
het = c(het, a[2] / sum(a))
}

hb$het = het

write.table(hb, file = paste0("haploblocks/", hbs$chr[i], "_", hbs$start[i], "_", hbs$end[i], ".hbdat.csv"), col.names = T, row.names = F, quote = F, sep = ",")

}


# LD
cd ~/scratch/clover/

# install ngsLD locally
git clone https://github.com/fgvieira/ngsLD.git

cd ngsLD
make

cd ~/scratch/clover/

# loop over each chromosome with a haploblock
# and concatenate a beagle file for the whole chromosome
# and downsample to 5k sites
# run ngsLD
cat haploblocks-18-9-23.txt | awk '{print $1}' | sort -u | while read chr
do
cat windows-chrs-only-10Mb.list | awk -v chr=$chr '$1 == chr {print NR}' | while read N
do zcat angsd/PCA-admix-$N.beagle.gz | tail -n +2
done | nl | shuf -n 5000 | sort -n | cut -f2- | gzip > ld/$chr.beagle.gz

zcat ld/$chr.beagle.gz | awk '{print $1}' | sed 's/_/\t/' > ld/$chr.pos

ngsLD/ngsLD --geno ld/$chr.beagle.gz --n_ind 444 --n_sites 5000 --max_kb_dist 0 --pos ld/$chr.pos --n_threads 8 --probs\
| sed "s/${chr}://g" | awk -F "\t" '{print $1, $2, $4}' > ld/$chr.ld

done



# in R
# subset beagle files for homozygotes for each haploblock
library(data.table)

setwd("~/scratch/ragweed/")

# read in data frame of haploblock locations
hbs = read.table("haploblocks-24-8-23.txt", header = F)
#hbs = read.table("haploblocks-extra.txt", header = F)

# read in list of samples (order in beagle file)
samps = read.table("samples-meta-444.txt", header = F)$V1

for (i in 1:nrow(hbs)){

# read in beagle file for chromosome
beag = fread(paste0("ld/", hbs[i, 1], ".beagle.gz"), header = F)

# read in genotype data for haploblock
hb.dat = read.table(paste0("haploblocks/", hbs[i, 1], "_", hbs[i, 2], "_", hbs[i, 3], ".hbdat.geno.csv"), header = T, sep = ",")

# a vector of samples homozygous for haploblock allele 0
h0 = hb.dat[hb.dat$geno == 0, "sample"]

# column numbers
h0.k = sort(c(1:3,
which(samps %in% h0) * 3 + 3,
which(samps %in% h0) * 3 + 2,
which(samps %in% h0) * 3 + 1))

# subset beagle and write out
fwrite(beag[, ..h0.k], file = paste0("ld/", hbs[i, 1], "_", hbs[i, 2], "_", hbs[i, 3], "-h0.beagle.gz"), col.names = F, row.names = F, quote = F, sep = "\t", compress = "gzip")

# a vector of samples homozygous for haploblock allele 0
h1 = hb.dat[hb.dat$geno == 1, "sample"]

# column numbers
h1.k = sort(c(1:3,
which(samps %in% h1) * 3 + 3,
which(samps %in% h1) * 3 + 2,
which(samps %in% h1) * 3 + 1))

# subset beagle and write out
fwrite(beag[, ..h1.k], file = paste0("ld/", hbs[i, 1], "_", hbs[i, 2], "_", hbs[i, 3], "-h1.beagle.gz"), col.names = F, row.names = F, quote = F, sep = "\t", compress = "gzip")

}


# run ngsLD on homozygous haploblock allele beagles
#cat haploblocks-18-9-23.txt | while read chr stt fin
#cat haploblocks-extra.txt | while read chr stt fin
cat haploblocks-24-8-23.txt | head -n 16 | tail -n 1 | while read chr stt fin
do

# count the number of samples in the beagle file
nind=$((($(zcat ld/${chr}_${stt}_${fin}-h0.beagle.gz | head -n 1 | awk -F "\t" '{print NF}') - 3)/3))

# run ngsLD
ngsLD/ngsLD --geno ld/${chr}_${stt}_${fin}-h0.beagle.gz --n_ind $nind --n_sites 5000 --min_maf 0.05 --max_kb_dist 0 --pos ld/$chr.pos --n_threads 8 --probs\
| sed "s/${chr}://g" | awk -F "\t" '{print $1, $2, $4}' > ld/${chr}_${stt}_${fin}-h0.ld

# count the number of samples in the beagle file
nind=$((($(zcat ld/${chr}_${stt}_${fin}-h1.beagle.gz | head -n 1 | awk -F "\t" '{print NF}') - 3)/3))

# run ngsLD
ngsLD/ngsLD --geno ld/${chr}_${stt}_${fin}-h1.beagle.gz --n_ind $nind --n_sites 5000 --min_maf 0.05 --max_kb_dist 0 --pos ld/$chr.pos --n_threads 8 --probs\
| sed "s/${chr}://g" | awk -F "\t" '{print $1, $2, $4}' > ld/${chr}_${stt}_${fin}-h1.ld

done


### plot out clustering, range allele frequency and LD

# in R
library(data.table)
library(tidyverse)
library(ggplot2)
library(cowplot)

setwd("~/scratch/ragweed/")

# read in data frame of haploblock locations
#hbs = read.table("haploblocks-18-9-23.txt", header = F)
#hbs = read.table("haploblocks-extra.txt", header = F)
hbs = read.table("haploblocks-24-8-23.txt", header = F)

for (i in 1:nrow(hbs)){

# read in genotype data for haploblock
hb = read.table(paste0("haploblocks/", hbs[i, 1], "_", hbs[i, 2], "_", hbs[i, 3], ".hbdat.geno.csv"), header = T, sep = ",")

# data summary
hb.box = as.data.frame(matrix(nrow = 3, ncol = 5))

for (j in 1:3){
g = (j - 1) / 2
het = subset(hb, geno == g)$het
het = het[!is.na(het)]
hb.box[j, 1] = mean(het)
hb.box[j, 2] = mean(het) - (sd(het) / sqrt(length(het)))
hb.box[j, 3] = mean(het) + (sd(het) / sqrt(length(het)))
hb.box[j, 4] = mean(subset(hb, geno == g)$PC1)
hb.box[j, 5] = length(het) * (max(hb$PC1) - min(hb$PC1)) / ncol(hb)
}

# range allele frequency
hb.raf = hb %>% group_by(range) %>% summarise(af = mean(geno))

clust.plot = ggplot() +
	geom_point(data = hb, aes(x = PC1, y = het, color = as.character(geno)), size = 1, shape = 1) +
	geom_crossbar(data = hb.box, aes(x = hb.box[, 4], y = hb.box[, 1], ymin = hb.box[, 2], ymax = hb.box[, 3]), width = 0.01) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("") +
	labs(x = "PC1", y = "heterozygosity") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

raf.plot = ggplot(data = hb.raf, aes(x = range, y = af)) +
	geom_bar(stat = "identity") + 
	ggtitle("") +
	labs(x = "", y = "frequency") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# LD plots
# function to get the second highest value
maxN <- function(x, N=2){
	len <- length(x)
	if(N>len){
		warning('N greater than length(x).  Setting N=length(x)')
		N <- length(x)
	}
	sort(x,partial=len-N+1)[len-N+1]
}

# Make LD plots
all.samp = as.data.frame(fread(paste0("ld/", hbs[i, 1], ".ld"), header = F))
all.samp$win1 = floor(all.samp$V1 / 500000) * 500000
all.samp$win2 = floor(all.samp$V2 / 500000) * 500000

all.samp = all.samp %>% 
	group_by(win1, win2) %>% 
	summarize(n = n(), max2r2 = maxN(V3)) %>% 
	filter(win1 != win2)

h0.samp = as.data.frame(fread(paste0("ld/", hbs[i, 1], "_", hbs[i, 2], "_", hbs[i, 3], "-h0.ld"), header = F))

h0.samp$win1 = floor(h0.samp$V1 / 500000) * 500000
h0.samp$win2 = floor(h0.samp$V2 / 500000) * 500000

h0.samp = h0.samp %>% 
	group_by(win1, win2) %>% 
	summarize(n = n(), max2r2 = maxN(V3)) %>%
	rename(win1 = win2, win2 = win1) %>% 
	filter(win1 != win2)

h1.samp = as.data.frame(fread(paste0("ld/", hbs[i, 1], "_", hbs[i, 2], "_", hbs[i, 3], "-h1.ld"), header = F))
h1.samp$win1 = floor(h1.samp$V1 / 500000) * 500000
h1.samp$win2 = floor(h1.samp$V2 / 500000) * 500000

h1.samp = h1.samp %>% 
	filter(V3 != "NaN") %>%
	group_by(win1, win2) %>% 
	summarize(n = n(), max2r2 = maxN(V3)) %>%
	rename(win1 = win2, win2 = win1) %>% 
	filter(win1 != win2)

hb.start = hbs[i, 2]
hb.end = hbs[i, 3]

ld.plot0 = rbind(all.samp, h0.samp) %>%
filter(n > 1) %>%
ggplot(.,aes()) + 
geom_tile(aes(x = win1 / 1000000, y = win2 / 1000000, fill = max2r2)) +
annotate("segment", y = -1, x = floor(hb.start / 500000) / 2, yend = -1, xend = floor(hb.end / 500000) / 2, color = "red", size = 5) +
annotate("segment", y = floor(hb.start / 500000) / 2, x = -1, yend = floor(hb.end / 500000) / 2, xend = -1, color = "red", size = 5) +
scale_fill_viridis_c(limits = c(0, 1)) +
ylab("Mbp") +
xlab("Mbp") +
scale_x_continuous(limits = c(-1, max(all.samp$win2) / 1000000), expand = c(0, 0)) +
scale_y_continuous(limits = c(-1, max(all.samp$win2) / 1000000), expand = c(0, 0)) +
theme_classic() +
theme(legend.position = "none",
	plot.title = element_text(size = 28),
	axis.text = element_text(size = 18),
	axis.title = element_text(size = 18),
	panel.background = element_rect(fill = 'black', colour = 'black')
)

ld.plot1 = rbind(all.samp, h1.samp) %>%
filter(n > 1) %>%
ggplot(.,aes()) + 
geom_tile(aes(x = win1 / 1000000, y = win2 / 1000000, fill = max2r2)) +
annotate("segment", y = -1, x = floor(hb.start / 500000) / 2, yend = -1, xend = floor(hb.end / 500000) / 2, color = "red", size = 5) +
annotate("segment", y = floor(hb.start / 500000) / 2, x = -1, yend = floor(hb.end / 500000) / 2, xend = -1, color = "red", size = 5) +
scale_fill_viridis_c(limits = c(0, 1)) +
ylab("Mbp") +
xlab("Mbp") +
scale_x_continuous(limits = c(-1, max(all.samp$win2) / 1000000), expand = c(0, 0)) +
scale_y_continuous(limits = c(-1, max(all.samp$win2) / 1000000), expand = c(0, 0)) +
theme_classic() +
theme(legend.position = "none",
	plot.title = element_text(size = 28),
	axis.text = element_text(size = 18),
	axis.title = element_text(size = 18),
	panel.background = element_rect(fill = 'black', colour = 'black')
)

ggsave(plot_grid(clust.plot, raf.plot, ld.plot0, ld.plot1, ncol = 4, align = "hv", axis = "bl"),
	file = paste0("haploblocks/", hbs[i, 1], "_", hbs[i, 2], "_", hbs[i, 3], ".clust-freq-ld.png"),
	device = "png",
	width = 1920,
	height = 240 * 2,
	units = "px",
	dpi = 72)
}

# genotype gwas samples for haploblocks
ls ~/scratch/gwas/*.bam > gwas.bamlist
cat allbams-9-23.bamlist gwas.bamlist > allbams-9-23-gwas.bamlist
wc -l allbams-9-23-gwas.bamlist # 3246

# angsd-gwas-geno.sh
#!/bin/bash
#SBATCH --job-name=angsd-gwas-geno
#SBATCH --account=def-johnso73
#SBATCH --ntasks=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --mem-per-cpu=10G
#SBATCH --time=1-00:00:00
#SBATCH --output=angsd-gwas-geno-%a.out
#SBATCH --error=angsd-gwas-geno-%a.err
#SBATCH --array=1-5

cd ~/scratch/clover/

N=$SLURM_ARRAY_TASK_ID
WIND=$(cat haploblocks-26-09-23.txt | head -n $N | tail -n 1 | awk '{print $2 ":" $3 "-" $4}')

module load nixpkgs/16.09
module load intel/2018.3
module load angsd/0.929
module load plink/1.9b_5.2-x86_64

angsd \
-nThreads 8 \
-bam allbams-9-23-gwas.bamlist \
-r $WIND \
-out angsd/gwas-hb-$N \
-GL 2 \
-doMajorMinor 1 \
-doCounts 1 \
-doGLF 2 \
-SNP_pval 1e-6 \
-doMaf 2 \
-doGeno -1 \
-doPost 1 \
-minMapQ 30 \
-minQ 20 \
-trim 5 \
-minMaf 0.05 \
-minInd 811 \
-geno_minDepth 2 \
-setMinDepthInd 2 \
-uniqueOnly 1

pcangsd -t 8 -b angsd/gwas-hb-$N.beagle.gz -o angsd/gwas-hb-$N

###

# make initial haploblock data frames with PC1, PC2 and heterozygosity
# in R

setwd("~/scratch/clover/")

meta = read.table("allbams-9-23-gwas.bamlist-sample-depth.txt", header = F)
colnames(meta) = c("sample", "coverage")

expt = c(rep("glue", 2660), rep("gwas", 586))

for (N in 1:5){
hb = as.data.frame(eigen(read.table(paste0("angsd/gwas-hb-", N, ".cov")))$vectors[, c(1, 2)])
colnames(hb) = c("PC1", "PC2")
hb = cbind(meta, hb, expt)

write.table(hb, file = paste0("haploblocks/gwas-geno-", N, ".hbdat.csv"), col.names = T, row.names = F, quote = F, sep = ",")

}

# locally
library(ggplot2)
library(cowplot)

setwd("~/Dropbox/HODGINSLAB/CLOVER2/")

# glue haploblock genotypes
genos = read.csv("RESULTS/hb-geno-26-09-23.csv")

# hb7a1
hb7a1 = read.csv("haploblocks/gwas-geno-1.hbdat.csv", header = T)
hb7a1 = subset(hb7a1, coverage > 0.4)

hb7a1 = merge(hb7a1, genos[, c("sample", "hb7a1")], all.x = T)

hb7a1.clust.plot = ggplot() +
	geom_point(data = subset(hb7a1, expt == "glue"), aes(x = PC1, y = PC2, color = as.character(hb7a1)), size = 1, shape = 1) +
	geom_point(data = subset(hb7a1, expt == "gwas"), aes(x = PC1, y = PC2), color = "#e7298a", size = 1, shape = 19) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("hb7a1") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# assign genotypes manually
hb = subset(hb7a1, expt == "gwas")[, c("sample", "PC1", "PC2")]
hb.homo1 = hb[which(hb$PC1 < 0.02), ]
hb.homo2 = hb[which(hb$PC1 > 0.06), ]
hb.het = hb[which(hb$PC1 >= 0.02 & hb$PC1 <= 0.06), ]

hb.homo1$geno = 0
hb.homo2$geno = 1
hb.het$geno = 0.5

hb = rbind(hb.homo1, hb.het, hb.homo2)

# check clustering
ggplot() +
	geom_point(data = hb, aes(x = PC1, y = PC2, color = as.character(geno)), size = 1, shape = 1) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# store genotypes
colnames(hb)[4] = "hb7a1"
gwas.hb7a1 = hb[, c(1, 4)]



# hb7a2
hb7a2 = read.csv("haploblocks/gwas-geno-2.hbdat.csv", header = T)
hb7a2 = subset(hb7a2, coverage > 0.4)

hb7a2 = merge(hb7a2, genos[, c("sample", "hb7a2")], all.x = T)

hb7a2.clust.plot = ggplot() +
	geom_point(data = subset(hb7a2, expt == "glue"), aes(x = PC1, y = PC2, color = as.character(hb7a2)), size = 1, shape = 1) +
	geom_point(data = subset(hb7a2, expt == "gwas"), aes(x = PC1, y = PC2), color = "#e7298a", size = 1, shape = 19) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("hb7a2") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# assign genotypes manually
hb = subset(hb7a2, expt == "gwas")[, c("sample", "PC1", "PC2")]
hb.homo1 = hb[which(hb$PC1 < 0.004), ]
hb.homo2 = hb[which(hb$PC1 > 0.04), ]
hb.het = hb[which(hb$PC1 >= 0.004 & hb$PC1 <= 0.04), ]

hb.homo1$geno = 0
hb.homo2$geno = 1
hb.het$geno = 0.5

hb = rbind(hb.homo1, hb.het, hb.homo2)

# check clustering
ggplot() +
	geom_point(data = hb, aes(x = PC1, y = PC2, color = as.character(geno)), size = 1, shape = 1) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# store genotypes
colnames(hb)[4] = "hb7a2"
gwas.hb7a2 = hb[, c(1, 4)]



# hb7b
hb7b = read.csv("haploblocks/gwas-geno-3.hbdat.csv", header = T)
hb7b = subset(hb7b, coverage > 0.4)

hb7b = merge(hb7b, genos[, c("sample", "hb7b")], all.x = T)

hb7b.clust.plot = ggplot() +
	geom_point(data = subset(hb7b, expt == "glue"), aes(x = PC1, y = PC2, color = as.character(hb7b)), size = 1, shape = 1) +
	geom_point(data = subset(hb7b, expt == "gwas"), aes(x = PC1, y = PC2), color = "#e7298a", size = 1, shape = 19) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("hb7b") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# assign genotypes manually
hb = subset(hb7b, expt == "gwas")[, c("sample", "PC1", "PC2")]
hb.homo1 = hb[which(hb$PC1 > -0.013), ]
hb.homo2 = hb[which(hb$PC1 < -0.075), ]
hb.het = hb[which(hb$PC1 <= -0.013 & hb$PC1 >= -0.075), ]

hb.homo1$geno = 0
hb.homo2$geno = 1
hb.het$geno = 0.5

hb = rbind(hb.homo1, hb.het, hb.homo2)

# check clustering
ggplot() +
	geom_point(data = hb, aes(x = PC1, y = PC2, color = as.character(geno)), size = 1, shape = 1) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# store genotypes
colnames(hb)[4] = "hb7b"
gwas.hb7b = hb[, c(1, 4)]



# hb9
hb9 = read.csv("haploblocks/gwas-geno-4.hbdat.csv", header = T)
hb9 = subset(hb9, coverage > 0.4)

hb9 = merge(hb9, genos[, c("sample", "hb9")], all.x = T)

# rotation
angle = pi / 20
M = matrix( c(cos(angle), -sin(angle), sin(angle), cos(angle)), 2, 2 )
rot = as.data.frame(as.matrix(hb9[, c("PC1", "PC2")]) %*% M)
colnames(rot) = c("PC1.rot", "PC2.rot")
hb9 = cbind(hb9, rot)

hb9.clust.plot = ggplot() +
	geom_point(data = subset(hb9, expt == "glue"), aes(x = PC1.rot, y = PC2.rot, color = as.character(hb9)), size = 1, shape = 1) +
	geom_point(data = subset(hb9, expt == "gwas"), aes(x = PC1.rot, y = PC2.rot), color = "#e7298a", size = 1, shape = 19) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("hb9") +
	labs(x = "PC1 (rotated 9 degrees)", y = "PC2 (rotated 9 degrees)") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# assign genotypes manually
hb = subset(hb9, expt == "gwas")[, c("sample", "PC1.rot", "PC2.rot")]
hb.homo1 = hb[which(hb$PC1.rot < 0.005), ]
hb.homo2 = hb[which(hb$PC1.rot > 0.04), ]
hb.het = hb[which(hb$PC1.rot >= 0.005 & hb$PC1.rot <= 0.04), ]

hb.homo1$geno = 0
hb.homo2$geno = 1
hb.het$geno = 0.5

hb = rbind(hb.homo1, hb.het, hb.homo2)

# check clustering
ggplot() +
	geom_point(data = hb, aes(x = PC1.rot, y = PC2.rot, color = as.character(geno)), size = 1, shape = 1) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# store genotypes
colnames(hb)[4] = "hb9"
gwas.hb9 = hb[, c(1, 4)]



# hb13
hb13 = read.csv("haploblocks/gwas-geno-5.hbdat.csv", header = T)
hb13 = subset(hb13, coverage > 0.4)

hb13 = merge(hb13, genos[, c("sample", "hb13")], all.x = T)

# rotation
angle = -pi / 20
M = matrix( c(cos(angle), -sin(angle), sin(angle), cos(angle)), 2, 2 )
rot = as.data.frame(as.matrix(hb13[, c("PC1", "PC2")]) %*% M)
colnames(rot) = c("PC1.rot", "PC2.rot")
hb13 = cbind(hb13, rot)

hb13.clust.plot = ggplot() +
	geom_point(data = subset(hb13, expt == "glue"), aes(x = PC1.rot, y = PC2.rot, color = as.character(hb13)), size = 1, shape = 1) +
	geom_point(data = subset(hb13, expt == "gwas"), aes(x = PC1.rot, y = PC2.rot), color = "#e7298a", size = 1, shape = 19) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("hb13") +
	labs(x = "PC1 (rotated -9 degrees)", y = "PC2 (rotated -9 degrees)") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# assign genotypes manually
hb = subset(hb13, expt == "gwas")[, c("sample", "PC1.rot", "PC2.rot")]
hb.homo1 = hb[which(hb$PC1.rot < -0.01), ]
hb.homo2 = hb[which(hb$PC1.rot > 0.017), ]
hb.het = hb[which(hb$PC1.rot >= -0.01 & hb$PC1.rot <= 0.017), ]

hb.homo1$geno = 0
hb.homo2$geno = 1
hb.het$geno = 0.5

hb = rbind(hb.homo1, hb.het, hb.homo2)

# check clustering
ggplot() +
	geom_point(data = hb, aes(x = PC1.rot, y = PC2.rot, color = as.character(geno)), size = 1, shape = 1) +
	scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3")) +
	ggtitle("") +
	labs(x = "PC1", y = "PC2") + 
	theme_classic() +
	theme(legend.position = "none", plot.title = element_text(size = 28), axis.text = element_text(size = 14), axis.title = element_text(size = 28))

# store genotypes
colnames(hb)[4] = "hb13"
gwas.hb13 = hb[, c(1, 4)]

png(file = "RESULTS/gwas-haploblocks.png", width = 1920, height = 240 * 2)
plot_grid(hb7a1.clust.plot, hb7a2.clust.plot, hb7b.clust.plot, hb9.clust.plot, hb13.clust.plot,
	ncol = 5, align = "hv", axis = "bl")
dev.off()

# make output table
a = merge(gwas.hb7a1, gwas.hb7a2, by = "sample")
b = merge(a, gwas.hb7b, by = "sample")
c = merge(b, gwas.hb9, by = "sample")
d = merge(c, gwas.hb13, by = "sample")

# write out
write.table(d, file = "RESULTS/hb-geno-GWAS.csv", row.names = F, col.names = T, quote = F, sep = ",")
